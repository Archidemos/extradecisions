# -*- ck2.scripted_effects -*-


emf_stop_hiding = {
	if = {
		limit = { trait = in_hiding }
		remove_trait = in_hiding
		add_character_modifier = { name = went_out_of_hiding_timer duration = 180 hidden = yes }
		hidden_tooltip = { character_event = { id = CM.6400 } } # Notify plotters and family
	}
}

# These do_not_disturb related effects are here for convenience as well as primarily a means of centralizing code which deals
# with this status, should we ever switch to an alterate design based-upon automatically-expiring, timed, and hidden
# character modifiers.

emf_do_not_disturb = {
	set_flag = do_not_disturb
}

emf_see_god = {
	isis = { reverse_banish = PREV }
	death = { death_reason = death_missing }
}

emf_vanish_character = {
	dynasty = none
	set_father = 0
	set_mother = 0
	any_spouse_even_if_dead = { remove_spouse = PREV }
	any_consort = { remove_consort = PREV }
	any_lover = { remove_lover = PREV }
	any_ward = { remove_guardian = yes }
	any_friend = { remove_friend = PREV }
	any_rival = { remove_rival = PREV }
	any_claim = { remove_claim = PREV }
	# A reminder that you definitely do not want to use emf_vanish_character on a high-born with children, or
	# dynasty trees will break (unless they are the dynasty founder and have only one dynastic child, I guess).
	if = {
		limit = { is_female = no }
		any_child_even_if_dead = { set_father = 0 }
	}
	else = {
		any_child_even_if_dead = { set_mother = 0 }
	}
	# Part of all this extra state clearing is to increase the chances that the dead character will be culled
	# entirely by the game on save/reload.
	emf_remove_all_traits = yes
	if = {
		limit = { is_alive = yes }
		clear_persistent_event_target = pet_parent_dyn
		death = { death_reason = death_missing }
	}
}

emf_liege_change = {
	hidden_tooltip = {
		# pf_liege_change_effect = yes
		if = {
			limit = {
				independent = no
				is_tributary = yes
			}
			any_suzerain = { remove_tributary = PREV }
		}
		# # Remove any invalidated protected_appointment opinions due to liege change
		# any_opinion_modifier_target = {
			# limit = {
				# reverse_has_opinion_modifier = { who = PREV modifier = opinion_protected_appointment_always }
				# NOT = { is_liege_of = PREV }
			# }
			# reverse_remove_opinion = { who = PREV modifier = opinion_protected_appointment_always }
		# }
	}
}
