# -*- ck2.events -*-


namespace = emf_empires


# emf_empires.0
# Determine if an empire needs to be dismantled due to decline
#
# MTTH event rather than annual pulse so that the 'war = no'
# requirement doesn't prevent empires from being dissolved
# for potentially many years on end.
character_event = {
	id = emf_empires.0
	desc = emf_empires.0.desc
	picture = GFX_evt_bad_news
	border = GFX_event_normal_frame_war

	only_independent = yes
	war = no

	trigger = {
		tier = EMPEROR
		is_nomadic = no
		had_global_flag = { flag = EMF days = 10950 } # First 30yr of campaign
		any_demesne_title = {
			emf_empires_aed_valid_title = yes
		}
		has_random_dejure = no
	}

	mean_time_to_happen = {
		days = 0
	}

	immediate = {
		random_demesne_title = {
			limit = { emf_empires_aed_valid_title = yes }
			log = "INFO: AED: disentegrating [This.GetID] ([This.GetFullName]), held by [Root.EMF_GetDebugName]..."
			save_event_target_as = emf_empire_title
		}

		# Workaround for issue #574; ex-nomads with spurious clan titles will have the hard-code auto-create a new empire
		# title immediately after AED destroys their current one. Solution: get rid of the spurious clan title before
		# destroying the empire (and don't bug players with an announcement event about this).
		if = {
			limit = {
				any_demesne_title = {
					tier = KING
					clan = yes
				}
			}
			set_flag = emf_aed_skip_announcement
			set_flag = emf_aed_had_spurious_clan_title
			log = "-> ruler has a spurious clan title (announcement event will be skipped), destroying:"
			any_demesne_title = {
				limit = {
					tier = KING
					clan = yes
				}
				log = "---> destroying [This.GetID] ([This.GetFullName])"
				emf_unsafe_destroy_title = yes
			}
		}

		if = { # If we have another empire or king title to fallback-upon, then skip searching for a kingdom
			limit = {
				OR = {
					any_demesne_title = {
						tier = EMPEROR
						is_primary_holder_title = no
						temporary = no
					}
					any_demesne_title = {
						tier = KING
						temporary = no
					}
				}
			}
			log = "-> already has another crown-tier title to fallback upon, skipping search"
			break = yes
		}

		# Then we will try to find one...
		log = "-> searching for a fallback kingdom:"

		set_flag = emf_skip_title_basic_allow_tmp # Temporarily disables title_king_basic_allow requirements

		# First, check capital kingdom for availability
		if = {
			limit = {
				capital_scope = {
					kingdom = {
						has_holder = no
						is_title_active = THIS
						ROOT = { is_landed_title_allowed = PREV }
					}
				}
			}
			# Good. Now determine whether we'd qualify to form it by the 51% rule.
			capital_scope = { kingdom = { save_event_target_as = emf_king_title } }
			character_event = { id = emf_empires.4 } # Check 51% rule
			if = {
				limit = { check_variable = { which = king_county value > 0 } } # 51% rule passes
				event_target:emf_king_title = { save_event_target_as = emf_new_title }
				log = "---> chose capital kingdom: [emf_new_title.EMF_GetDebugTitleNameWithDeJureLieges]"
				break = yes
			}
		}

		# If not found, check all de jure kingdoms of any other empire titles that ROOT has, if the empire is de jure
		any_demesne_title = { # For all the de jure empires...
			limit = { tier = EMPEROR }
			any_direct_de_jure_vassal_title = { # For all the de jure vassal kingdoms...
				limit = {
					tier = KING
					is_de_jure_title = yes
					has_holder = no
					is_title_active = THIS
					ROOT = { is_landed_title_allowed = PREV }
				}
				save_event_target_as = emf_king_title
				ROOT = { character_event = { id = emf_empires.4 } } # Check 50% rule
				if = {
					limit = { ROOT = { check_variable = { which = king_county value > 0 } } } # 51% rule passes
					event_target:emf_king_title = { save_event_target_as = emf_new_title }
					log = "---> chose de jure vassal kingdom: [emf_new_title.EMF_GetDebugTitleNameWithDeJureLieges]"
					break = yes
				}
				clear_event_target = emf_king_title
			}
		}

		# If still not found (empire was probably titular), check every de jure kingdom title in the game...
		any_landed_title = {
			limit = {
				tier = KING
				is_de_jure_title = yes
				has_holder = no
				is_title_active = THIS
				ROOT = { is_landed_title_allowed = PREV }
			}
			save_event_target_as = emf_king_title
			ROOT = { character_event = { id = emf_empires.4 } } # Check 50% rule
			if = {
				limit = { ROOT = { check_variable = { which = king_county value > 0 } } } # 51% rule passes
				event_target:emf_king_title = { save_event_target_as = emf_new_title }
				log = "---> chose any old de jure kingdom: [emf_new_title.EMF_GetDebugTitleNameWithDeJureLieges]"
				break = yes
			}
			clear_event_target = emf_king_title
		}

		# If STILL not found, create a titular kingdom title (might want to make this optional in the future,
		# because some people might prefer not to have a silly titular king-tier title that they cannot destroy
		# until they have another king- or higher-tier title to make primary). Title will have the name and CoA
		# of the ruler's capital county (and some color offset).
		capital_scope = {
			county = {
				create_title = {
					tier = KING
					landless = no
					temporary = no
					custom_created = yes
					culture = ROOT
					holder = ROOT
					base_title = THIS
				}
				new_title = {
					log = "---> created custom titular kingdom [This.GetID] ([This.GetBaseName]) from base county title [Prev.GetID] ([Prev.GetBaseName])"
					save_event_target_as = emf_new_title
					set_flag = emf_autodestroy
					if = {
						limit = { NOT = { empire = { always = yes } } }
						de_jure_liege = e_null
					}
				}
			}
		}
	}

	option = {
		name = emf_empires.0.opt.a
		hidden_effect = {
			any_realm_lord = { character_event = { id = HRE.1 days = 1 } }
		}
		if = {
			limit = {
				NOT = {
					any_demesne_title = {
						tier = EMPEROR
						NOT = { title = event_target:emf_empire_title }
						temporary = no
					}
				}
			}
			# We will not be able to bind king-tier vassals after the empire is destroyed
			any_vassal = {
				limit = { tier = KING }
				log = "-> setting vassal king independent: [This.EMF_GetDebugName]"
				set_defacto_liege = THIS
				emf_liege_change = yes
			}
		}
		if = {
			limit = { event_target:emf_new_title = { always = yes } }
			# We'll be creating or have created a fallback kingdom title
			set_flag = emf_no_law_penalties
			primary_title = {
				event_target:emf_new_title = {
					if = {
						limit = { NOT = { holder = ROOT } }
						log = "-> granting fallback kingdom: [This.EMF_GetDebugTitleNameWithDeJureLieges]"
						grant_title = { target = ROOT type = created }
					}
					copy_title_laws = PREV
					if = {
						limit = { PREV = { has_law = ze_administration_laws_2 } }
						add_law = ze_administration_laws_1
					}
					set_flag = emf_aed_fallback
				}
			}
			clr_flag = emf_no_law_penalties
		}
		set_flag = emf_context_aed
		set_flag = emf_context_aed_@event_target:emf_empire_title
		event_target:emf_empire_title = {
			set_flag = emf_aed_destroyed
			emf_unsafe_destroy_title = yes
			hidden_effect = {
				ROOT = { character_event = { id = HRE.1 } }
			}
			hidden_effect = {
				if = {
					limit = { NOT = { ROOT = { has_flag = emf_aed_skip_announcement } } }
					save_event_target_as = emf_crier_dead_title
					any_player = {
						narrative_event = { id = emf_crier.253 }
					}
					clear_event_target = emf_crier_dead_title
				}
			}
		}
		prestige = -500
	}

	after = {
		hidden_effect = {
			set_variable = { which = king_county value = 0 }
			clr_flag = emf_skip_title_basic_allow_tmp
			clr_flag = emf_aed_skip_announcement
		}
	}
}

# emf_empires.1
#
# Make sure horde invaders act like horde invaders (trait = conqueror)
# Called from on_actions yearly pulse
character_event = {
	id = emf_empires.1

	is_triggered_only = yes
	hide_window = yes

	only_independent = yes
	only_capable = yes
	min_age = 16

	trigger = {
		tier = EMPEROR
		NOT = { trait = conqueror }
		ai = yes
		primary_title = { # Horde invaders
			OR = {
				AND = {
					NOT = { year = 1300 }
					OR = {
						title = e_golden_horde
						title = e_il-khanate
						title = e_mongol_empire
						title = e_chagatai
					}
				}
				title = e_timurids
				title = e_mexikha
			}
		}
		OR = { # So long as they haven't converted to a non-horde religion
			is_nomadic = yes
			primary_title = { title = e_timurids }
			religion = tengri_pagan
			religion = tengri_pagan_reformed
			religion = aztec
			religion = aztec_reformed
		}
	}

	immediate = {
		add_trait = conqueror
	}

	option = { name = OK }
}

# emf_empires.2
#
# Remove conqueror trait from horde invaders that settle down (or become
# player-controlled or incapable).
#
# Called from on_actions biannual pulse
#
# We only worry about still-independent, still empire-tier rulers,
# because none of the other cases really matter.
character_event = {
	id = emf_empires.2

	is_triggered_only = yes
	hide_window = yes

	only_rulers = yes

	trigger = {
		trait = conqueror
		OR = {
			ai = no
			is_incapable = yes
			is_adult = no
			AND = {
				OR = {
					has_landed_title = e_golden_horde
					has_landed_title = e_il-khanate
					has_landed_title = e_mongol_empire
					has_landed_title = e_chagatai
				}
				OR = {
					year = 1300
					NOR = {
						is_nomadic = yes
						religion = tengri_pagan
						religion = tengri_pagan_reformed
					}
				}
			}
			AND = {
				has_landed_title = e_mexikha
				NOR = {
					religion = aztec
					religion = aztec_reformed
				}
			}
		}
	}

	immediate = {
		remove_trait = conqueror
	}
}

# emf_empires.4
#
# Check the 50% rule for kingdom event_target:emf_king_title
character_event = {
	id = emf_empires.4
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		set_variable = { which = king_county value = 0 }

		event_target:emf_king_title = {
			any_de_jure_vassal_title = {
				limit = {
					tier = COUNT
					owner_under_ROOT = yes
				}
				ROOT = { change_variable = { which = king_county value = 1 } }
			}
			any_de_jure_vassal_title = {
				limit = {
					tier = COUNT
					owner_under_ROOT = no
				}
				ROOT = { change_variable = { which = king_county value = -1 } }
			}
		}
	}
}

# emf_empires.5
#
# on_new_holder on_action which fires whenever a new empire is created.
character_event = {
	id = emf_empires.5

	is_triggered_only = yes
	hide_window = yes

	only_independent = yes

	trigger = {
		FROM = { tier = EMPEROR }
		NOT = { FROMFROM = { always = yes } }
		has_game_started = yes
		FROM = { has_flag = emf_aed_destroyed } # Currently the only thing we do here
	}

	immediate = {
		FROM = {
			clr_flag = emf_aed_destroyed
			# SOMEDAY: might want to store the duration in years or some approximation of the emf_aed_destroyed
			# flag into a cumulative title variable for "years spent disintegrated," but the applications for
			# that don't currently exist (mostly contextual stuff).
			change_variable = { which = emf_aed_restored value = 1 }
		}
	}
}